#!/usr/bin/node

var nconf = require('nconf');
var XLSX = require('xlsx-style');
var clone = require('clone');
var fs = require('fs');


nconf.env({ separator: "__", whitelist : ['MS_DEBUG'] }).argv();

// Required: --input --source --output --sheet --msdata (.json)


var workbook = XLSX.readFile(nconf.get('input'));
console.log("Read sheet in "+nconf.get('input'));
var sheet = nconf.get('sheet') - 1;
var output = nconf.get('output');
var source = nconf.get('source');

var first_sheet = workbook.SheetNames[sheet];
var peptides_sheet = workbook.Sheets[first_sheet];
new_sheet = clone(peptides_sheet);
var get_msdata_file = function(path) {
    return new Promise(function(resolve,reject) {
        fs.readFile(path, 'utf8', function (err, data) {
            if (err) throw err;
            resolve(JSON.parse(data));
        });
    });
};

var sort_msdata_by_spectra = function(msdata) {
    var results = {};
    var data = msdata.data;
    var uniprot;
    for ( uniprot in data ) {
        var peptides = data[uniprot];
        peptides.forEach(function(pep) {
            if ( source && pep.source !== source) {
                return;
            }
            pep.spectra.map(function(spec) {
                var key = [spec.rt.toFixed(2),spec.score.toFixed(2),spec.scan].join('#');
                if ( ! results[key]) {
                    results[key] = [];
                }
                pep.uniprot = uniprot;
                results[key].push(pep);
            });
        });
    }
    return results;
};

function sheet_from_array_of_arrays(data, opts) {
    var ws = {};
    var range = {s: {c:10000000, r:10000000}, e: {c:0, r:0 }};
    for(var R = 0; R != data.length; ++R) {
        for(var C = 0; C != data[R].length; ++C) {
            if(range.s.r > R) range.s.r = R;
            if(range.s.c > C) range.s.c = C;
            if(range.e.r < R) range.e.r = R;
            if(range.e.c < C) range.e.c = C;
            var cell = {v: data[R][C] };
            if(cell.v == null) continue;
            var cell_ref = XLSX.utils.encode_cell({c:C,r:R});

            if(typeof cell.v === 'number') cell.t = 'n';
            else if(typeof cell.v === 'boolean') cell.t = 'b';
            else if(cell.v instanceof Date) {
                cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                cell.v = datenum(cell.v);
            }
            else cell.t = 's';

            ws[cell_ref] = cell;
        }
    }
    if(range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
    return ws;
}

var extract_rows_from_peptides = function(peptides,uniprot) {
    var rowdata = peptides.map(function(peptide) {
        return peptide.spectra.map(function(spec) {
            return [
                    peptide.sequence,
                    uniprot || peptide.uniprot,
                    (peptide.sites || []).map(function(site) { return site[1]+"@"+site[0]; }).join(','),
                    peptide.composition.join(','),
                    peptide.quant ? peptide.quant.quant : 'NA',
                    spec.score,
                    spec.ppm,
                    spec.rt,
                    spec.scan
            ];
        });
    });
    return [].concat.apply([], rowdata);
};

var extract_new_rows = function(msdata) {
    var data = msdata.data;
    var results = [ [ 'sequence', 'uniprot', 'sites','composition','quant', 'XCorr', 'PPM', 'RT', 'Scan' ]];
    for (uniprot in data ) {
        var peptides = data[uniprot].filter(function(pep) { return (pep.source == source) && ! pep.accounted; });
        var rows = extract_rows_from_peptides(peptides,uniprot);
        results = results.concat(rows);
    }
    return sheet_from_array_of_arrays(results);
};

get_msdata_file(nconf.get('msdata')).then(function(msdata) {
    if (msdata.metadata[0]['msdata-version'] != '1.1') {
        throw new Error("msdata format incompatible");
    }
    return msdata;
}).then(function(msdata) {
    var by_spectrum = sort_msdata_by_spectra(msdata);
    var rows = XLSX.utils.sheet_to_row_object_array(peptides_sheet, {'raw' : true });
    var annotations = rows.map(function(row) {
        var scan_id = row['First Scan'] == row['Last Scan'] ? row['First Scan'] : row['First Scan']+';'+row['Last Scan'];
        if ( ! row['RT [min]']) {
            return "NA";
        }
        var rowkey = [row['RT [min]'].toFixed(2),row['XCorr'].toFixed(2),scan_id].join('#');
        var quant_value = row['Medium/Light'];
        var related = by_spectrum[rowkey];
        if (! related || related.length < 1) {
            return "no-mapping";
        }
        related.forEach(function(pep) {
            pep.accounted = true;
        });
        if (related.length > 1) {
            return "multi-peptide";
        }
        related = related[0];
        if (related.sequence !== row['Sequence'].toUpperCase()) {
            return "non-equal-sequence";
        }
        if ( quant_value ) {
            var related_areas = related.quant_areas;
            var medium_areas = [].concat(related_areas.medium);
            var light_areas = [].concat(related_areas.light);
            var related_quants = medium_areas.map(function(medium) {
                var light = light_areas.shift();
                return (medium/light).toFixed(2);
            });
            if (related_quants.indexOf(quant_value.toFixed(2)) < 0) {
                return "missing-quant";
            }
        } else {
            var spec_idx = related.spectra.map(function(spec) { return spec.scan == scan_id; }).indexOf(true);
            var self_channel = row['Quan Channel'].toLowerCase();
            var other_channel = self_channel == 'medium' ? 'light' : 'medium';
            if ( ! self_channel ) {
                if ( related.quant_areas[ 'medium' ][spec_idx] == 0 && related.quant_areas[ 'light' ][spec_idx] == 0) {
                    if (related.quant) {
                        return "not-quantified-but-merged";
                    }
                    return "not-quantified";
                }
                if (related.quant_areas[ 'medium' ][spec_idx] != 0 && related.quant_areas[ 'light' ][spec_idx] != 0) {
                    return "found-as-with-ratio";
                }
                if (related.quant_areas[ 'medium' ][spec_idx] != 0 || related.quant_areas[ 'light' ][spec_idx] != 0) {
                    return "found-as-singlet";
                }
                if (related.quant && "mad" in related.quant) {
                    return "merged-with-quant-ratio";
                }
                if ( ! related.quant ) {
                    return "merged-as-unquantified";
                }
                if (isNaN(related.quant.quant)) {
                    return "merged-as-paired-singlet";
                }
                if (related.quant.singlet_confidence == 'low') {
                    return "merged-as-low-confidence-singlet";
                }
                return "merged-as-singlet";
            }
            if ( ! related.quant_areas ) {
                return "missing-singlet";
            }

            if ( related.quant_areas[ self_channel ][spec_idx] > 0 && related.quant_areas[ other_channel ][spec_idx] == 0 ) {
                // We have a singlet that we found
                if (related.quant && "mad" in related.quant) {
                    return "redundant-singlet";
                }
                if ( ! related.quant ) {
                    return "not-quantified-low-sn";
                }
                if (isNaN(related.quant.quant)) {
                    return "paired-singlet";
                }
                if (related.quant.singlet_confidence == 'low') {
                    return "used-low-confidence-singlet";
                }
                return "used-singlet";
            } else {
                return "missing-singlet";
            }
        }

        return "used";
    });
    var col_num = Object.keys(rows[0]).length;
    var max_range = 'A1';
    annotations.forEach(function(annot,i) {
        max_range = XLSX.utils.encode_col(col_num)+XLSX.utils.encode_row(i+1);
        new_sheet[XLSX.utils.encode_cell({c:col_num,r:i+1})] = {v:annot,t:'s'};
    });
    new_sheet['!ref'] = 'A1:'+max_range;
    return msdata;
}).then(function(msdata) {
    workbook.SheetNames.push('Validated');
    workbook.Sheets['Validated'] = new_sheet;
    return msdata;
}).then(function(msdata){
    workbook.SheetNames.push('New rows');
    workbook.Sheets['New rows'] = extract_new_rows(msdata);
}).then(function(){
    XLSX.writeFile(workbook,nconf.get('output'));
}).catch(function(err) {
    console.error(err);
});
